---
swagger: "2.0"
info:
  description: "API spec."
  version: "1.0.0"
  title: "Editickets"
host: "editickets.com"
basePath: "/api/v1"
tags:
- name: "Users"
  description: "Everything about your Users"
- name: "Roles"
  description: "Everything about your Users"
- name: "Venues"
  description: "Everything about your Venues"
- name: "Spaces"
  description: "Everything about your Spaces"
- name: "Events"
  description: "Everything about your Events"
- name: "EventType"
  description: "Everything about type of events"
- name: "Orders"
  description: "Everything about your Orders"
- name: "Tickets"
  description: "Everything about your Tickets"
schemes:
- "https"
security:
- accessCode:
  - "read"
  - "write"
paths:
  /users:
    get:
      tags:
      - "Users"
      summary: "Fetch users"
      description: "The Users endpoint returns information about the Users."
      operationId: "usersGET"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "query"
        description: "Filter records by status."
        required: false
        type: "string"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "role"
        in: "query"
        description: "Filter records by role\nOptions:\n  * `ADMIN`\n  * `MANAGER`\n\
          \  * `CUSTOMER`\n"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "Users"
      summary: "Add a new user"
      description: "The Users endpoint returns information about the Users."
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "Users"
      summary: "Update an existing user"
      description: "The Users endpoint returns information about the user updated."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
  /users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Fetch users by user id"
      description: "The Users endpoint returns information about one User."
      operationId: "getUserById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "Users"
      summary: "Delete users by user id"
      description: "The Users endpoint returns information about the User deleted."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
  /roles:
    get:
      tags:
      - "Roles"
      summary: "Fetch roles"
      description: "The Roles endpoint returns information about the Roles."
      operationId: "getRoles"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    post:
      tags:
      - "Roles"
      summary: "Add a new Roles"
      description: "The Roles endpoint returns information about the Role Created."
      operationId: "createRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    put:
      tags:
      - "Roles"
      summary: "Update an existing Role"
      description: "The Roles endpoint returns information about the Role Updated."
      operationId: "updateRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Role object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
  /roles/{roleId}:
    get:
      tags:
      - "Roles"
      summary: "Fetch role by role id"
      description: "The Roles endpoint returns information about one Role."
      operationId: "getRoleById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "ID of Role to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      summary: "Delete role by role id"
      description: "The Roles endpoint returns information about the Role deleted."
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "ID of Role to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
  /venues:
    get:
      tags:
      - "Venues"
      summary: "Fetch Venues"
      description: "The Venues endpoint returns information about the Venues."
      operationId: "getVenues"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "geoposition"
        in: "query"
        description: "Filter records by geoposition separated by `,` (latitude,longitude)."
        required: false
        type: "string"
      - name: "venue-type"
        in: "query"
        description: "Filter records by venue type"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "Filter records by owner"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
    post:
      tags:
      - "Venues"
      summary: "Add a new Venue"
      description: "The Venue endpoint returns information about the Venue Created."
      operationId: "createVenue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Venue object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Venue"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
    put:
      tags:
      - "Venues"
      summary: "Update an existing Venue"
      description: "The Venues endpoint returns information about the Venue Updated."
      operationId: "updateVenue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Venue object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Venue"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
  /venues/{venueId}:
    get:
      tags:
      - "Venues"
      summary: "Fetch Venue by Venue id"
      description: "The Venues endpoint returns information about one Venue."
      operationId: "getVenueById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "venueId"
        in: "path"
        description: "ID of Venue to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
    delete:
      tags:
      - "Venues"
      summary: "Delete Venue by Venue id"
      description: "The Venue endpoint returns information about the Venue deleted."
      operationId: "deleteVenue"
      produces:
      - "application/json"
      parameters:
      - name: "venueId"
        in: "path"
        description: "ID of Venue to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
  /spaces:
    get:
      tags:
      - "Spaces"
      summary: "Fetch Spaces"
      description: "The Space endpoint returns information about the Space."
      operationId: "getSpaces"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "min-price"
        in: "query"
        description: "Filter records by range of prices."
        required: false
        type: "integer"
      - name: "max-price"
        in: "query"
        description: "Filter records by range of prices."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_6"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Spaces"
    post:
      tags:
      - "Spaces"
      summary: "Add a new Space"
      description: "The Space endpoint returns information about the Space Created."
      operationId: "createSpace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Space object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Space"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Spaces"
    put:
      tags:
      - "Spaces"
      summary: "Update an existing Space"
      description: "The Space endpoint returns information about the Space Updated."
      operationId: "updateSpace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Space object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Space"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Spaces"
  /spaces/{spaceId}:
    get:
      tags:
      - "Spaces"
      summary: "Fetch Spaces by Space id"
      description: "The Space endpoint returns information about one Space."
      operationId: "getSpaceById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "spaceId"
        in: "path"
        description: "ID of Space to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Spaces"
    delete:
      tags:
      - "Spaces"
      summary: "Delete Space by Space id"
      description: "The Space endpoint returns information about the Space deleted."
      operationId: "deleteSpace"
      produces:
      - "application/json"
      parameters:
      - name: "spaceId"
        in: "path"
        description: "ID of Space to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Spaces"
  /events:
    get:
      tags:
      - "Events"
      summary: "Fetch Event"
      description: "The Event endpoint returns information about the Event."
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "query"
        description: "Filter records by status."
        required: false
        type: "string"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "event-start"
        in: "query"
        description: "Filter records by start."
        required: false
        type: "string"
      - name: "event-end"
        in: "query"
        description: "Filter records by end."
        required: false
        type: "string"
      - name: "selling-start"
        in: "query"
        description: "Filter records by start."
        required: false
        type: "string"
      - name: "selling-end"
        in: "query"
        description: "Filter records by end."
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "Filter records by owner"
        required: false
        type: "string"
      - name: "event-type"
        in: "query"
        description: "Filter records by status."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_8"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
    post:
      tags:
      - "Events"
      summary: "Add a new Event"
      description: "The Event endpoint returns information about the Event Created."
      operationId: "createEvente"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
    put:
      tags:
      - "Events"
      summary: "Update an existing Event"
      description: "The Event endpoint returns information about the Event Updated."
      operationId: "updateEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /events/{eventId}:
    get:
      tags:
      - "Events"
      summary: "Fetch Events by Space id"
      description: "The Event endpoint returns information about one Event."
      operationId: "getEventById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
    delete:
      tags:
      - "Events"
      summary: "Delete Event by Event id"
      description: "The Event endpoint returns information about the Event deleted."
      operationId: "deleteEvent"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /events/{eventId}/startSelling:
    post:
      tags:
      - "Events"
      summary: "Start the selling event and return that event"
      description: "The Event endpoint stop the selling time and returns information\
        \ about that Event."
      operationId: "startSellingEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to start the selling time and return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /events/{eventId}/stopSelling:
    post:
      tags:
      - "Events"
      summary: "Stop the selling event and return that event"
      description: "The Event endpoint stop the selling time and returns information\
        \ about that Event."
      operationId: "stopSellingEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to stop the selling time and return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /events/{eventId}/publish:
    post:
      tags:
      - "Events"
      summary: "Publish event and return that event"
      description: "The Event endpoint publish and returns information about that\
        \ Event."
      operationId: "publishEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to publish and return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /events/{eventId}/unPublish:
    post:
      tags:
      - "Events"
      summary: "Un-Publish event and return that event"
      description: "The Event endpoint un-publish and returns information about that\
        \ Event."
      operationId: "unPublishEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of Event to publish and return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /event-types:
    get:
      tags:
      - "EventType"
      summary: "Fetch Event Types"
      description: "The Event Type endpoint returns information about the Event Type."
      operationId: "getEventType"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "sort"
        in: "query"
        description: "Sort order:\n * `asc` - Ascending, from A to Z\n * `desc` -\
          \ Descending, from Z to A\n"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_10"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventType"
    post:
      tags:
      - "EventType"
      summary: "Add a new Event Type"
      description: "The Event Type endpoint returns information about the Event Type\
        \ Created."
      operationId: "createEventType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event Type object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/EventType"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventType"
    put:
      tags:
      - "EventType"
      summary: "Update an existing EventType"
      description: "The Event Type endpoint returns information about the Event Type\
        \ Updated."
      operationId: "updateEventType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event Type object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/EventType"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventType"
  /event-types/{eventTypeId}:
    get:
      tags:
      - "Venues"
      summary: "Fetch Event type by Event Type id"
      description: "The Event Type endpoint returns information about one Event Type."
      operationId: "getEventTypeById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventTypeId"
        in: "path"
        description: "ID of Event Type to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Venues"
    delete:
      tags:
      - "EventType"
      summary: "Delete Event Type by Event Type id"
      description: "The Event Type endpoint returns information about the Event Type\
        \ deleted."
      operationId: "deleteEventType"
      produces:
      - "application/json"
      parameters:
      - name: "eventTypeId"
        in: "path"
        description: "ID of Event Type to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventType"
  /orders:
    get:
      tags:
      - "Orders"
      summary: "Fetch Order"
      description: "The Order endpoint returns information about the Order."
      operationId: "getOrders"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "query"
        description: "Filter records by status."
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_12"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Orders"
    post:
      tags:
      - "Orders"
      summary: "Add a new Order"
      description: "The Order endpoint returns information about the Order Created."
      operationId: "createOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Order object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_201"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Orders"
  /orders/{orderId}:
    get:
      tags:
      - "Orders"
      summary: "Fetch Order by Space id"
      description: "The Order endpoint returns information about one Order."
      operationId: "getOrderById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of Order to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_201"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Orders"
    delete:
      tags:
      - "Orders"
      summary: "Delete Order by Order id"
      description: "The Order endpoint returns information about the Order deleted."
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of Order to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_201"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Orders"
  /ticket:
    get:
      tags:
      - "Tickets"
      summary: "Fetch Ticket"
      description: "The Ticket endpoint returns information about the Ticket."
      operationId: "getTickets"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "Number or records to skip."
        required: false
        type: "integer"
        format: "int64"
      - name: "per-page"
        in: "query"
        description: "Number or records per page."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_13"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized (https://tools.ietf.org/html/rfc7235)"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Tickets"
    post:
      tags:
      - "Tickets"
      summary: "Add a new Ticket"
      description: "The Ticket endpoint returns information about the Ticket Created."
      operationId: "createTicket"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ticket object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Ticket"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/inline_response_201"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Tickets"
  /ticket/{ticketId}:
    get:
      tags:
      - "Tickets"
      summary: "Fetch Ticket by Ticket id"
      description: "The Ticket endpoint returns information about one Ticket."
      operationId: "getTicketById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ticketId"
        in: "path"
        description: "ID of Ticket to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_14"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Tickets"
    delete:
      tags:
      - "Tickets"
      summary: "Delete Ticket by Ticket id"
      description: "The Ticket endpoint returns information about the Ticket deleted."
      operationId: "deleteTicket"
      produces:
      - "application/json"
      parameters:
      - name: "ticketId"
        in: "path"
        description: "ID of Ticket to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/inline_response_200_14"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        503:
          description: "Service Unavailable Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Tickets"
securityDefinitions:
  accessCode:
    type: "oauth2"
    authorizationUrl: "https://editickets.auth0.com/oauth/auth"
    tokenUrl: "https://editickets.auth0.com/oauth/token"
    flow: "accessCode"
    scopes:
      write: "allows modifying resources"
      read: "allows reading resources"
definitions:
  Venue:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Venue"
      description:
        type: "string"
        description: "Description of the Venue"
      address:
        $ref: "#/definitions/Address"
      geoposition:
        $ref: "#/definitions/Coordinates"
      distribution:
        type: "string"
      capacity:
        type: "number"
      spaces:
        type: "array"
        items:
          $ref: "#/definitions/Space"
      parent:
        $ref: "#/definitions/Venue"
      owner:
        $ref: "#/definitions/User"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  Address:
    type: "object"
    properties:
      address1:
        type: "string"
      address2:
        type: "string"
      state:
        type: "string"
      city:
        type: "string"
      zipcode:
        type: "string"
      country:
        type: "string"
  Space:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the space (for example premium, vip, etc)"
      description:
        type: "string"
        description: "Description of the space"
      price:
        type: "number"
        description: "Price per seat in that space"
      imageMapUrl:
        type: "string"
        description: "Image URL associated with the Space (stored in S3)"
      totalSeats:
        type: "number"
        description: "Total of seats in the space"
      seats:
        type: "array"
        items:
          $ref: "#/definitions/Seat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "Record creation date (audit record)"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "Record update date (audit record)"
  Event:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Description of the event"
      title:
        type: "string"
        description: "Title of the event"
      name:
        type: "string"
        description: "Name of the title"
      posterUrl:
        type: "string"
        description: "image URL associated with the event (stored in S3)"
      spaceUrl:
        type: "string"
        description: "Image URL associated with the space in the venue (stored in\
          \ S3)"
      startDate:
        type: "string"
        format: "date-time"
        description: "Date Time of the event start"
      endDate:
        type: "string"
        format: "date-time"
        description: "Date Time of the event end"
      sellingStartDate:
        type: "string"
        format: "date-time"
        description: "Date Time of the selling  start"
      SellingEndDate:
        type: "string"
        format: "date-time"
        description: "Date Time of the selling  end"
      maxTicketsPerOrder:
        type: "number"
        description: "Maximum of tickets allowed to buy by order"
      venue:
        $ref: "#/definitions/Venue"
      status:
        $ref: "#/definitions/EventStatus"
      socialmediaUrls:
        type: "array"
        items:
          $ref: "#/definitions/SocialMedia"
      eventType:
        $ref: "#/definitions/EventType"
      createdBy:
        $ref: "#/definitions/User"
      updatedBy:
        description: "Record creation date (audit record)"
        $ref: "#/definitions/User"
      createdAt:
        type: "string"
        format: "date-time"
        description: "Record creation date (audit record)"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "Record update date (audit record)"
  SocialMedia:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Social Media name"
      url:
        type: "string"
        description: "Social media link associated with the event"
      image:
        type: "string"
        description: "image URL associated with the event (stored in S3)"
  EventStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Event Status"
      description:
        type: "string"
        description: "Description of the Event Status"
  Seat:
    type: "object"
    properties:
      row:
        type: "string"
        description: "Position in X of the seat"
      number:
        type: "string"
        description: "Position in Y of the seat"
      code:
        type: "string"
        description: "Alphanumeric code of the seat"
      status:
        $ref: "#/definitions/SeatStatus"
  SeatStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the status"
      description:
        type: "string"
        description: "Description of the status"
  Coordinates:
    type: "object"
    properties:
      latitude:
        type: "string"
        description: "Latitude of geolocation"
      longitude:
        type: "string"
        description: "longitude of geolocation"
  User:
    type: "object"
    properties:
      email:
        type: "string"
        description: "User email to authenticate"
      password:
        type: "string"
        description: "User password(encrypted) to authenticate"
      role:
        $ref: "#/definitions/Role"
      status:
        $ref: "#/definitions/UserStatus"
      createdAt:
        type: "string"
        format: "date-time"
        description: "Record creation date (audit record)"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "Record update date (audit record)"
  UserStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the user status"
      description:
        type: "string"
        description: "Description of the user status"
  Role:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the role"
      description:
        type: "string"
        description: "Description of the role"
  Order:
    type: "object"
    properties:
      totalCost:
        type: "number"
        description: "Total to pay"
      tickets:
        type: "array"
        description: "Tickets associated with the order"
        items:
          $ref: "#/definitions/Ticket"
      status:
        $ref: "#/definitions/OrderStatus"
  OrderStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Order Type"
      description:
        type: "string"
        description: "Description of the Order Type"
  Ticket:
    type: "object"
    properties:
      validationCode:
        type: "string"
        description: "Code for validations"
      validationImage:
        type: "string"
        description: "Image generated to validate the ticket (qr code)"
      space:
        $ref: "#/definitions/Space"
      seat:
        $ref: "#/definitions/Seat"
  EventType:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Event Type"
      description:
        type: "string"
        description: "Description of the Event Type"
  Error:
    type: "object"
    properties:
      code:
        type: "string"
        description: "Error Code"
      message:
        type: "string"
        description: "Detailed error description"
      name:
        type: "string"
        description: "Error Name"
      details:
        type: "object"
        description: "Object with more detail to describe the error"
        properties: {}
  Response:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Items results"
        items:
          type: "object"
          properties: {}
      meta:
        $ref: "#/definitions/Response_meta"
  Pagination:
    type: "object"
    properties:
      total:
        type: "integer"
        description: "Total number of results"
      count:
        type: "integer"
        description: "Total per page"
      per_page:
        type: "integer"
        description: "Maximum allowable results per page"
      current_page:
        type: "integer"
        description: "Current page"
      total_pages:
        type: "integer"
        description: "Total pages"
      link:
        $ref: "#/definitions/Link"
  Link:
    type: "object"
    properties:
      next:
        type: "string"
        description: "Next page"
  inline_response_200:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/User"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_1:
    properties:
      data:
        $ref: "#/definitions/User"
  inline_response_200_2:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Role"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_3:
    properties:
      data:
        $ref: "#/definitions/Role"
  inline_response_200_4:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Venue"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_5:
    properties:
      data:
        $ref: "#/definitions/Venue"
  inline_response_200_6:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Space"
  inline_response_200_7:
    properties:
      data:
        $ref: "#/definitions/Space"
  inline_response_200_8:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Event"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_9:
    properties:
      data:
        $ref: "#/definitions/Event"
  inline_response_200_10:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/EventType"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_11:
    properties:
      data:
        $ref: "#/definitions/EventType"
  inline_response_200_12:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Order"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_201:
    properties:
      data:
        $ref: "#/definitions/Order"
  inline_response_200_13:
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Ticket"
      meta:
        $ref: "#/definitions/Pagination"
  inline_response_200_14:
    properties:
      data:
        $ref: "#/definitions/Ticket"
  Response_meta:
    properties:
      pagination:
        $ref: "#/definitions/Pagination"
